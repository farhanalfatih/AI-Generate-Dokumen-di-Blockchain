import express from "express";
import cors from "cors";
import fetch from "node-fetch";
import PDFDocument from "pdfkit";
import "dotenv/config";

const app = express();
app.use(cors());
app.use(express.json({ limit: "10mb" })); // Increase payload limit

const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;
const MAX_RETRIES = 3;
const RETRY_DELAY = 2000; // 2 seconds

// Rate limiting for AI requests
let lastAIRequest = 0;
const AI_REQUEST_COOLDOWN = 1500; // 1.5 seconds between AI calls

async function delay(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

// Health check endpoint
app.get("/health", (req, res) => {
  res.json({
    status: "ok",
    timestamp: new Date().toISOString(),
    hasApiKey: !!OPENROUTER_API_KEY,
    services: ["pdf-generation", "ai-text-generation"],
  });
});

// ===== Enhanced AI text generation with retry logic =====
app.post("/generate-text", async (req, res) => {
  let retries = 0;

  while (retries <= MAX_RETRIES) {
    try {
      const { prompt } = req.body;
      if (!prompt) {
        return res.status(400).json({
          error: "Prompt required",
          code: "MISSING_PROMPT",
        });
      }

      if (!OPENROUTER_API_KEY) {
        return res.status(500).json({
          error: "API key not configured",
          code: "MISSING_API_KEY",
        });
      }

      // Enforce rate limiting
      const now = Date.now();
      const timeSinceLastRequest = now - lastAIRequest;
      if (timeSinceLastRequest < AI_REQUEST_COOLDOWN) {
        await delay(AI_REQUEST_COOLDOWN - timeSinceLastRequest);
      }

      console.log(`AI request attempt ${retries + 1}/${MAX_RETRIES + 1}`);

      // Using chat/completions endpoint instead of completions
      const aiRes = await fetch(
        "https://openrouter.ai/api/v1/chat/completions",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${OPENROUTER_API_KEY}`,
            "HTTP-Referer": "http://localhost:4000",
            "X-Title": "Document Generator",
          },
          body: JSON.stringify({
            model: "deepseek/deepseek-r1:free",
            messages: [
              {
                role: "user",
                content: `Tulis surat perjanjian resmi dengan format rapih berdasarkan prompt berikut:\n${prompt}\n\nSurat harus memiliki:\n1. Header dengan judul yang sesuai\n2. Isi yang detail dan profesional\n3. Tempat untuk tanda tangan\n4. Tanggal dan tempat\n\nGunakan bahasa Indonesia yang formal dan baku.`,
              },
            ],
            max_tokens: 1500,
            temperature: 0.7,
          }),
        }
      );

      lastAIRequest = Date.now();

      if (aiRes.status === 429) {
        // Rate limited
        if (retries < MAX_RETRIES) {
          const backoffDelay = Math.pow(2, retries) * RETRY_DELAY;
          console.log(`Rate limited, retrying in ${backoffDelay}ms`);
          await delay(backoffDelay);
          retries++;
          continue;
        } else {
          return res.status(429).json({
            error: "Rate limit exceeded. Please try again later.",
            code: "RATE_LIMIT_EXCEEDED",
            retryAfter: 60,
          });
        }
      }

      if (!aiRes.ok) {
        const errorText = await aiRes.text();
        console.error(`AI API Error ${aiRes.status}:`, errorText);

        if (
          retries < MAX_RETRIES &&
          (aiRes.status >= 500 || aiRes.status === 503)
        ) {
          // Server error - retry
          console.log(`Server error, retrying in ${RETRY_DELAY}ms`);
          await delay(RETRY_DELAY);
          retries++;
          continue;
        }

        return res.status(aiRes.status).json({
          error: `AI service error: ${aiRes.status}`,
          code: "AI_SERVICE_ERROR",
          details: errorText,
        });
      }

      const data = await aiRes.json();
      const aiText = data.choices?.[0]?.message?.content || "";

      if (!aiText) {
        return res.status(500).json({
          error: "No content generated by AI",
          code: "EMPTY_AI_RESPONSE",
        });
      }

      console.log("AI text generated successfully");

      return res.json({
        aiText,
        success: true,
        usage: data.usage,
      });
    } catch (err) {
      console.error(`Attempt ${retries + 1} failed:`, err.message);

      if (
        retries < MAX_RETRIES &&
        (err.code === "ECONNRESET" ||
          err.code === "ETIMEDOUT" ||
          err.code === "ENOTFOUND")
      ) {
        console.log(`Network error, retrying in ${RETRY_DELAY}ms`);
        await delay(RETRY_DELAY);
        retries++;
        continue;
      }

      return res.status(500).json({
        error: "Network error contacting AI service",
        code: "NETWORK_ERROR",
        details: err.message,
      });
    }
  }
});

// ===== Enhanced PDF generation with error handling =====
app.post("/generate-pdf", (req, res) => {
  try {
    const { aiText } = req.body;

    if (!aiText) {
      return res.status(400).json({
        error: "AI text required",
        code: "MISSING_AI_TEXT",
      });
    }

    console.log("Generating PDF...");

    const doc = new PDFDocument({
      margin: 50,
      size: "A4",
      info: {
        Title: "Surat Perjanjian",
        Subject: "Dokumen Perjanjian",
        Author: "Document Generator",
      },
    });

    let buffers = [];

    doc.on("data", (chunk) => buffers.push(chunk));

    doc.on("end", () => {
      try {
        const pdfData = Buffer.concat(buffers);

        res.writeHead(200, {
          "Content-Type": "application/pdf",
          "Content-Disposition": "attachment; filename=surat-perjanjian.pdf",
          "Content-Length": pdfData.length,
          "Cache-Control": "no-cache",
        });

        res.end(pdfData);
        console.log("PDF generated and sent successfully");
      } catch (err) {
        console.error("Error sending PDF:", err);
        if (!res.headersSent) {
          res.status(500).json({
            error: "Error sending PDF",
            code: "PDF_SEND_ERROR",
          });
        }
      }
    });

    doc.on("error", (err) => {
      console.error("PDF generation error:", err);
      if (!res.headersSent) {
        res.status(500).json({
          error: "PDF generation failed",
          code: "PDF_GENERATION_ERROR",
          details: err.message,
        });
      }
    });

    try {
      // Header dengan styling yang lebih baik
      doc
        .fontSize(18)
        .font("Helvetica-Bold")
        .text("SURAT PERJANJIAN", { align: "center" });

      doc.moveDown(0.5);

      // Garis bawah header
      doc.moveTo(150, doc.y).lineTo(450, doc.y).stroke();

      doc.moveDown(1.5);

      // AI content dengan formatting yang lebih baik
      const lines = aiText.split("\n");

      doc.fontSize(11).font("Helvetica");

      lines.forEach((line, index) => {
        if (line.trim()) {
          // Check if line looks like a header/title
          if (
            line.includes("SURAT") ||
            line.includes("PERJANJIAN") ||
            line.match(/^[A-Z\s]{5,}$/)
          ) {
            doc.fontSize(14).font("Helvetica-Bold");
          } else {
            doc.fontSize(11).font("Helvetica");
          }

          doc.text(line.trim(), {
            align:
              line.includes("SURAT") || line.includes("PERJANJIAN")
                ? "center"
                : "justify",
            lineGap: 2,
          });

          if (index < lines.length - 1) {
            doc.moveDown(0.3);
          }
        } else {
          doc.moveDown(0.5);
        }
      });

      doc.moveDown(2);

      // Signature section
      const currentDate = new Date().toLocaleDateString("id-ID", {
        year: "numeric",
        month: "long",
        day: "numeric",
      });

      doc.fontSize(11).font("Helvetica");
      doc.text(`Bandung, ${currentDate}`, { align: "right" });
      doc.moveDown(2);

      // Signature boxes
      const leftX = 80;
      const rightX = 350;
      const signY = doc.y;

      doc.text("Pihak Pertama", leftX, signY, { width: 150 });
      doc.text("Pihak Kedua", rightX, signY, { width: 150 });

      doc.moveDown(3);

      const lineY = doc.y;
      doc.text("(_________________)", leftX, lineY, { width: 150 });
      doc.text("(_________________)", rightX, lineY, { width: 150 });
    } catch (docErr) {
      console.error("Error creating PDF content:", docErr);
      doc.end();
      return;
    }

    doc.end();
  } catch (err) {
    console.error("PDF generation error:", err);
    res.status(500).json({
      error: "Failed to generate PDF",
      code: "PDF_CREATION_ERROR",
      details: err.message,
    });
  }
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error("Unhandled error:", err);
  res.status(500).json({
    error: "Internal server error",
    code: "INTERNAL_ERROR",
  });
});

// Graceful shutdown
process.on("SIGINT", () => {
  console.log("\nShutting down PDF server gracefully...");
  process.exit(0);
});

app.listen(4000, () => {
  console.log("PDF + AI server running on http://localhost:4000");
  console.log(`API Key configured: ${!!OPENROUTER_API_KEY}`);
  console.log(`Health check: http://localhost:4000/health`);
});
